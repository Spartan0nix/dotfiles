---
- name: Include .path file in bashrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    regexp: '^source ~/.path'
    line: 'source ~/.path'
  register: bashrc_update

- name: Add documentation for .path import in bashrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    insertbefore: '^source ~/.path'
    line: "\n# Source file containing path update"
  when: bashrc_update.changed

- name: Include .path file in zshrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    regexp: '^source ~/.path'
    line: 'source ~/.path'
    create: yes
  register: zshrc_update

- name: Add documentation for .path import in zshrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    insertbefore: '^source ~/.path'
    line: "\n# Source file containing path update"
  when: zshrc_update.changed
    
- name: Add function cdw to bashrc
  blockinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    block: |
      # Convert a Windows PATH to a linux PATH before executin 'cd'
      function cdw() {
          if [ $# -eq 1 ]; then
              converted_path=$(echo $1 | sed 's/C\:/c/' | sed 's/\\/\//g')
              cd_target="/mnt/${converted_path}"
              cd $cd_target
          else
              echo "Missing required Windows path"
          fi
          unset converted_path
          unset cd_target
      }
  when: lookup('env', 'WSL_DISTRO_NAME') != ""

- name: Add function cdw to zshrc
  blockinfile:
    path: "{{ ansible_user_dir }}/.zshrc"
    block: |
      # Convert a Windows PATH to a linux PATH before executin 'cd'
      function cdw() {
          if [ $# -eq 1 ]; then
              converted_path=$(print -P '%{$1%}' | sed 's/C\:/c/' | sed 's/\\/\//g')
              cd_target="/mnt/${converted_path}"
              cd $cd_target
          else
              echo "Missing required Windows path"
          fi
          unset converted_path
          unset cd_target
      }
  when: lookup('env', 'WSL_DISTRO_NAME') != ""